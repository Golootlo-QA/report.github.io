/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 504.0, "minX": 0.0, "maxY": 68404.0, "series": [{"data": [[0.0, 504.0], [0.1, 526.0], [0.2, 542.0], [0.3, 579.0], [0.4, 591.0], [0.5, 599.0], [0.6, 624.0], [0.7, 641.0], [0.8, 665.0], [0.9, 699.0], [1.0, 707.0], [1.1, 743.0], [1.2, 772.0], [1.3, 798.0], [1.4, 812.0], [1.5, 829.0], [1.6, 864.0], [1.7, 869.0], [1.8, 872.0], [1.9, 888.0], [2.0, 891.0], [2.1, 903.0], [2.2, 930.0], [2.3, 949.0], [2.4, 959.0], [2.5, 970.0], [2.6, 996.0], [2.7, 1013.0], [2.8, 1016.0], [2.9, 1039.0], [3.0, 1044.0], [3.1, 1049.0], [3.2, 1057.0], [3.3, 1073.0], [3.4, 1160.0], [3.5, 1177.0], [3.6, 1212.0], [3.7, 1235.0], [3.8, 1256.0], [3.9, 1287.0], [4.0, 1311.0], [4.1, 1341.0], [4.2, 1419.0], [4.3, 1434.0], [4.4, 1450.0], [4.5, 1495.0], [4.6, 1529.0], [4.7, 1531.0], [4.8, 1572.0], [4.9, 1583.0], [5.0, 1602.0], [5.1, 1638.0], [5.2, 1663.0], [5.3, 1689.0], [5.4, 1694.0], [5.5, 1709.0], [5.6, 1745.0], [5.7, 1765.0], [5.8, 1774.0], [5.9, 1790.0], [6.0, 1803.0], [6.1, 1836.0], [6.2, 1863.0], [6.3, 1866.0], [6.4, 1898.0], [6.5, 1932.0], [6.6, 1955.0], [6.7, 1991.0], [6.8, 2022.0], [6.9, 2032.0], [7.0, 2040.0], [7.1, 2042.0], [7.2, 2048.0], [7.3, 2072.0], [7.4, 2080.0], [7.5, 2090.0], [7.6, 2093.0], [7.7, 2122.0], [7.8, 2130.0], [7.9, 2139.0], [8.0, 2170.0], [8.1, 2199.0], [8.2, 2215.0], [8.3, 2234.0], [8.4, 2255.0], [8.5, 2270.0], [8.6, 2296.0], [8.7, 2299.0], [8.8, 2330.0], [8.9, 2335.0], [9.0, 2350.0], [9.1, 2371.0], [9.2, 2394.0], [9.3, 2404.0], [9.4, 2417.0], [9.5, 2423.0], [9.6, 2425.0], [9.7, 2434.0], [9.8, 2449.0], [9.9, 2452.0], [10.0, 2462.0], [10.1, 2470.0], [10.2, 2478.0], [10.3, 2494.0], [10.4, 2510.0], [10.5, 2516.0], [10.6, 2535.0], [10.7, 2562.0], [10.8, 2587.0], [10.9, 2593.0], [11.0, 2599.0], [11.1, 2615.0], [11.2, 2648.0], [11.3, 2668.0], [11.4, 2677.0], [11.5, 2686.0], [11.6, 2694.0], [11.7, 2719.0], [11.8, 2735.0], [11.9, 2749.0], [12.0, 2765.0], [12.1, 2781.0], [12.2, 2789.0], [12.3, 2822.0], [12.4, 2856.0], [12.5, 2914.0], [12.6, 2922.0], [12.7, 2950.0], [12.8, 2992.0], [12.9, 3001.0], [13.0, 3040.0], [13.1, 3056.0], [13.2, 3065.0], [13.3, 3082.0], [13.4, 3106.0], [13.5, 3121.0], [13.6, 3162.0], [13.7, 3218.0], [13.8, 3248.0], [13.9, 3271.0], [14.0, 3314.0], [14.1, 3337.0], [14.2, 3350.0], [14.3, 3375.0], [14.4, 3380.0], [14.5, 3411.0], [14.6, 3428.0], [14.7, 3439.0], [14.8, 3455.0], [14.9, 3463.0], [15.0, 3529.0], [15.1, 3589.0], [15.2, 3640.0], [15.3, 3756.0], [15.4, 3837.0], [15.5, 3856.0], [15.6, 3886.0], [15.7, 3912.0], [15.8, 3964.0], [15.9, 3999.0], [16.0, 4010.0], [16.1, 4052.0], [16.2, 4059.0], [16.3, 4082.0], [16.4, 4135.0], [16.5, 4170.0], [16.6, 4183.0], [16.7, 4198.0], [16.8, 4210.0], [16.9, 4230.0], [17.0, 4250.0], [17.1, 4272.0], [17.2, 4278.0], [17.3, 4297.0], [17.4, 4305.0], [17.5, 4307.0], [17.6, 4337.0], [17.7, 4354.0], [17.8, 4385.0], [17.9, 4396.0], [18.0, 4415.0], [18.1, 4424.0], [18.2, 4456.0], [18.3, 4460.0], [18.4, 4494.0], [18.5, 4500.0], [18.6, 4516.0], [18.7, 4521.0], [18.8, 4537.0], [18.9, 4559.0], [19.0, 4572.0], [19.1, 4589.0], [19.2, 4614.0], [19.3, 4622.0], [19.4, 4633.0], [19.5, 4639.0], [19.6, 4651.0], [19.7, 4666.0], [19.8, 4678.0], [19.9, 4683.0], [20.0, 4691.0], [20.1, 4696.0], [20.2, 4704.0], [20.3, 4714.0], [20.4, 4723.0], [20.5, 4749.0], [20.6, 4767.0], [20.7, 4785.0], [20.8, 4792.0], [20.9, 4821.0], [21.0, 4832.0], [21.1, 4832.0], [21.2, 4846.0], [21.3, 4866.0], [21.4, 4879.0], [21.5, 4885.0], [21.6, 4916.0], [21.7, 4947.0], [21.8, 4953.0], [21.9, 4963.0], [22.0, 4985.0], [22.1, 4998.0], [22.2, 5018.0], [22.3, 5043.0], [22.4, 5060.0], [22.5, 5072.0], [22.6, 5088.0], [22.7, 5095.0], [22.8, 5105.0], [22.9, 5109.0], [23.0, 5134.0], [23.1, 5171.0], [23.2, 5183.0], [23.3, 5203.0], [23.4, 5208.0], [23.5, 5224.0], [23.6, 5253.0], [23.7, 5289.0], [23.8, 5299.0], [23.9, 5319.0], [24.0, 5341.0], [24.1, 5362.0], [24.2, 5373.0], [24.3, 5410.0], [24.4, 5429.0], [24.5, 5439.0], [24.6, 5471.0], [24.7, 5482.0], [24.8, 5498.0], [24.9, 5529.0], [25.0, 5541.0], [25.1, 5577.0], [25.2, 5586.0], [25.3, 5644.0], [25.4, 5649.0], [25.5, 5734.0], [25.6, 5743.0], [25.7, 5762.0], [25.8, 5767.0], [25.9, 5771.0], [26.0, 5779.0], [26.1, 5810.0], [26.2, 5833.0], [26.3, 5848.0], [26.4, 5879.0], [26.5, 5894.0], [26.6, 5912.0], [26.7, 5915.0], [26.8, 5927.0], [26.9, 5951.0], [27.0, 5963.0], [27.1, 5973.0], [27.2, 5986.0], [27.3, 6057.0], [27.4, 6103.0], [27.5, 6111.0], [27.6, 6136.0], [27.7, 6150.0], [27.8, 6157.0], [27.9, 6169.0], [28.0, 6176.0], [28.1, 6190.0], [28.2, 6218.0], [28.3, 6221.0], [28.4, 6233.0], [28.5, 6240.0], [28.6, 6255.0], [28.7, 6264.0], [28.8, 6271.0], [28.9, 6277.0], [29.0, 6280.0], [29.1, 6287.0], [29.2, 6291.0], [29.3, 6299.0], [29.4, 6312.0], [29.5, 6324.0], [29.6, 6336.0], [29.7, 6354.0], [29.8, 6362.0], [29.9, 6374.0], [30.0, 6377.0], [30.1, 6393.0], [30.2, 6402.0], [30.3, 6404.0], [30.4, 6408.0], [30.5, 6421.0], [30.6, 6431.0], [30.7, 6436.0], [30.8, 6463.0], [30.9, 6485.0], [31.0, 6497.0], [31.1, 6504.0], [31.2, 6517.0], [31.3, 6530.0], [31.4, 6542.0], [31.5, 6565.0], [31.6, 6571.0], [31.7, 6577.0], [31.8, 6587.0], [31.9, 6590.0], [32.0, 6612.0], [32.1, 6623.0], [32.2, 6650.0], [32.3, 6651.0], [32.4, 6658.0], [32.5, 6667.0], [32.6, 6683.0], [32.7, 6697.0], [32.8, 6717.0], [32.9, 6719.0], [33.0, 6730.0], [33.1, 6740.0], [33.2, 6746.0], [33.3, 6758.0], [33.4, 6766.0], [33.5, 6772.0], [33.6, 6775.0], [33.7, 6782.0], [33.8, 6788.0], [33.9, 6791.0], [34.0, 6799.0], [34.1, 6808.0], [34.2, 6824.0], [34.3, 6831.0], [34.4, 6842.0], [34.5, 6851.0], [34.6, 6855.0], [34.7, 6861.0], [34.8, 6870.0], [34.9, 6874.0], [35.0, 6883.0], [35.1, 6894.0], [35.2, 6899.0], [35.3, 6912.0], [35.4, 6916.0], [35.5, 6924.0], [35.6, 6931.0], [35.7, 6932.0], [35.8, 6939.0], [35.9, 6944.0], [36.0, 6950.0], [36.1, 6957.0], [36.2, 6959.0], [36.3, 6965.0], [36.4, 6976.0], [36.5, 6979.0], [36.6, 6991.0], [36.7, 7000.0], [36.8, 7006.0], [36.9, 7010.0], [37.0, 7023.0], [37.1, 7029.0], [37.2, 7031.0], [37.3, 7033.0], [37.4, 7038.0], [37.5, 7047.0], [37.6, 7047.0], [37.7, 7059.0], [37.8, 7074.0], [37.9, 7080.0], [38.0, 7089.0], [38.1, 7093.0], [38.2, 7097.0], [38.3, 7107.0], [38.4, 7120.0], [38.5, 7124.0], [38.6, 7136.0], [38.7, 7147.0], [38.8, 7154.0], [38.9, 7158.0], [39.0, 7174.0], [39.1, 7181.0], [39.2, 7182.0], [39.3, 7189.0], [39.4, 7190.0], [39.5, 7202.0], [39.6, 7217.0], [39.7, 7223.0], [39.8, 7236.0], [39.9, 7238.0], [40.0, 7245.0], [40.1, 7255.0], [40.2, 7265.0], [40.3, 7273.0], [40.4, 7295.0], [40.5, 7298.0], [40.6, 7301.0], [40.7, 7308.0], [40.8, 7314.0], [40.9, 7322.0], [41.0, 7333.0], [41.1, 7342.0], [41.2, 7342.0], [41.3, 7347.0], [41.4, 7355.0], [41.5, 7363.0], [41.6, 7376.0], [41.7, 7383.0], [41.8, 7408.0], [41.9, 7415.0], [42.0, 7421.0], [42.1, 7446.0], [42.2, 7453.0], [42.3, 7465.0], [42.4, 7484.0], [42.5, 7496.0], [42.6, 7504.0], [42.7, 7510.0], [42.8, 7511.0], [42.9, 7519.0], [43.0, 7537.0], [43.1, 7540.0], [43.2, 7558.0], [43.3, 7566.0], [43.4, 7569.0], [43.5, 7576.0], [43.6, 7582.0], [43.7, 7591.0], [43.8, 7600.0], [43.9, 7613.0], [44.0, 7625.0], [44.1, 7632.0], [44.2, 7649.0], [44.3, 7655.0], [44.4, 7666.0], [44.5, 7668.0], [44.6, 7672.0], [44.7, 7683.0], [44.8, 7689.0], [44.9, 7696.0], [45.0, 7704.0], [45.1, 7712.0], [45.2, 7718.0], [45.3, 7722.0], [45.4, 7730.0], [45.5, 7749.0], [45.6, 7752.0], [45.7, 7772.0], [45.8, 7781.0], [45.9, 7786.0], [46.0, 7795.0], [46.1, 7804.0], [46.2, 7818.0], [46.3, 7829.0], [46.4, 7842.0], [46.5, 7855.0], [46.6, 7867.0], [46.7, 7874.0], [46.8, 7881.0], [46.9, 7883.0], [47.0, 7889.0], [47.1, 7893.0], [47.2, 7899.0], [47.3, 7903.0], [47.4, 7905.0], [47.5, 7914.0], [47.6, 7923.0], [47.7, 7927.0], [47.8, 7934.0], [47.9, 7947.0], [48.0, 7957.0], [48.1, 7968.0], [48.2, 7979.0], [48.3, 7991.0], [48.4, 7991.0], [48.5, 7996.0], [48.6, 8001.0], [48.7, 8018.0], [48.8, 8023.0], [48.9, 8034.0], [49.0, 8042.0], [49.1, 8046.0], [49.2, 8063.0], [49.3, 8072.0], [49.4, 8073.0], [49.5, 8082.0], [49.6, 8096.0], [49.7, 8100.0], [49.8, 8115.0], [49.9, 8133.0], [50.0, 8149.0], [50.1, 8157.0], [50.2, 8179.0], [50.3, 8185.0], [50.4, 8198.0], [50.5, 8204.0], [50.6, 8221.0], [50.7, 8237.0], [50.8, 8248.0], [50.9, 8255.0], [51.0, 8274.0], [51.1, 8281.0], [51.2, 8304.0], [51.3, 8325.0], [51.4, 8329.0], [51.5, 8337.0], [51.6, 8342.0], [51.7, 8343.0], [51.8, 8354.0], [51.9, 8371.0], [52.0, 8375.0], [52.1, 8401.0], [52.2, 8416.0], [52.3, 8421.0], [52.4, 8427.0], [52.5, 8438.0], [52.6, 8461.0], [52.7, 8463.0], [52.8, 8521.0], [52.9, 8534.0], [53.0, 8544.0], [53.1, 8553.0], [53.2, 8574.0], [53.3, 8579.0], [53.4, 8588.0], [53.5, 8595.0], [53.6, 8625.0], [53.7, 8637.0], [53.8, 8652.0], [53.9, 8670.0], [54.0, 8699.0], [54.1, 8717.0], [54.2, 8728.0], [54.3, 8737.0], [54.4, 8762.0], [54.5, 8779.0], [54.6, 8808.0], [54.7, 8819.0], [54.8, 8862.0], [54.9, 8881.0], [55.0, 8902.0], [55.1, 8919.0], [55.2, 8928.0], [55.3, 8933.0], [55.4, 8966.0], [55.5, 8971.0], [55.6, 8982.0], [55.7, 8991.0], [55.8, 9011.0], [55.9, 9026.0], [56.0, 9102.0], [56.1, 9116.0], [56.2, 9144.0], [56.3, 9164.0], [56.4, 9171.0], [56.5, 9190.0], [56.6, 9234.0], [56.7, 9288.0], [56.8, 9303.0], [56.9, 9368.0], [57.0, 9401.0], [57.1, 9463.0], [57.2, 9487.0], [57.3, 9491.0], [57.4, 9531.0], [57.5, 9587.0], [57.6, 9613.0], [57.7, 9649.0], [57.8, 9674.0], [57.9, 9686.0], [58.0, 9730.0], [58.1, 9756.0], [58.2, 9833.0], [58.3, 9835.0], [58.4, 9939.0], [58.5, 9979.0], [58.6, 9984.0], [58.7, 10057.0], [58.8, 10156.0], [58.9, 10198.0], [59.0, 10239.0], [59.1, 10321.0], [59.2, 10348.0], [59.3, 10364.0], [59.4, 10403.0], [59.5, 10423.0], [59.6, 10541.0], [59.7, 10623.0], [59.8, 10715.0], [59.9, 10755.0], [60.0, 10805.0], [60.1, 10848.0], [60.2, 10897.0], [60.3, 10937.0], [60.4, 11068.0], [60.5, 11118.0], [60.6, 11147.0], [60.7, 11231.0], [60.8, 11304.0], [60.9, 11307.0], [61.0, 11331.0], [61.1, 11404.0], [61.2, 11471.0], [61.3, 11632.0], [61.4, 11706.0], [61.5, 11770.0], [61.6, 11797.0], [61.7, 11897.0], [61.8, 12067.0], [61.9, 12158.0], [62.0, 12425.0], [62.1, 12519.0], [62.2, 12629.0], [62.3, 12675.0], [62.4, 13005.0], [62.5, 13120.0], [62.6, 13165.0], [62.7, 13208.0], [62.8, 13324.0], [62.9, 13433.0], [63.0, 13540.0], [63.1, 13573.0], [63.2, 13817.0], [63.3, 13945.0], [63.4, 14114.0], [63.5, 14187.0], [63.6, 14430.0], [63.7, 14594.0], [63.8, 14900.0], [63.9, 14944.0], [64.0, 15363.0], [64.1, 15530.0], [64.2, 15666.0], [64.3, 15994.0], [64.4, 19868.0], [64.5, 22431.0], [64.6, 28947.0], [64.7, 29269.0], [64.8, 29706.0], [64.9, 30026.0], [65.0, 30119.0], [65.1, 30473.0], [65.2, 30534.0], [65.3, 30677.0], [65.4, 30908.0], [65.5, 30996.0], [65.6, 31253.0], [65.7, 31396.0], [65.8, 31412.0], [65.9, 31491.0], [66.0, 31573.0], [66.1, 31874.0], [66.2, 32498.0], [66.3, 36213.0], [66.4, 36245.0], [66.5, 36370.0], [66.6, 37802.0], [66.7, 45144.0], [66.8, 45350.0], [66.9, 45519.0], [67.0, 45868.0], [67.1, 46083.0], [67.2, 46115.0], [67.3, 46328.0], [67.4, 46551.0], [67.5, 46958.0], [67.6, 47371.0], [67.7, 47401.0], [67.8, 47522.0], [67.9, 47796.0], [68.0, 48348.0], [68.1, 48764.0], [68.2, 49342.0], [68.3, 49719.0], [68.4, 50831.0], [68.5, 51203.0], [68.6, 51412.0], [68.7, 52003.0], [68.8, 52425.0], [68.9, 55409.0], [69.0, 55698.0], [69.1, 55702.0], [69.2, 55718.0], [69.3, 55729.0], [69.4, 55733.0], [69.5, 55739.0], [69.6, 55761.0], [69.7, 56080.0], [69.8, 56247.0], [69.9, 56613.0], [70.0, 58116.0], [70.1, 58330.0], [70.2, 58345.0], [70.3, 58432.0], [70.4, 58447.0], [70.5, 58490.0], [70.6, 58553.0], [70.7, 58583.0], [70.8, 58617.0], [70.9, 58747.0], [71.0, 58934.0], [71.1, 59012.0], [71.2, 59022.0], [71.3, 59629.0], [71.4, 59674.0], [71.5, 59957.0], [71.6, 60095.0], [71.7, 60101.0], [71.8, 60123.0], [71.9, 60221.0], [72.0, 60222.0], [72.1, 60222.0], [72.2, 60223.0], [72.3, 60224.0], [72.4, 60224.0], [72.5, 60226.0], [72.6, 60227.0], [72.7, 60229.0], [72.8, 60231.0], [72.9, 60231.0], [73.0, 60232.0], [73.1, 60233.0], [73.2, 60237.0], [73.3, 60241.0], [73.4, 60242.0], [73.5, 60243.0], [73.6, 60244.0], [73.7, 60247.0], [73.8, 60252.0], [73.9, 60256.0], [74.0, 60258.0], [74.1, 60262.0], [74.2, 60266.0], [74.3, 60299.0], [74.4, 60514.0], [74.5, 60884.0], [74.6, 60889.0], [74.7, 60890.0], [74.8, 60893.0], [74.9, 60894.0], [75.0, 60896.0], [75.1, 60899.0], [75.2, 60901.0], [75.3, 60902.0], [75.4, 60902.0], [75.5, 60903.0], [75.6, 60904.0], [75.7, 60907.0], [75.8, 60908.0], [75.9, 60909.0], [76.0, 60911.0], [76.1, 60911.0], [76.2, 60912.0], [76.3, 60914.0], [76.4, 60915.0], [76.5, 60916.0], [76.6, 60917.0], [76.7, 60918.0], [76.8, 60919.0], [76.9, 60919.0], [77.0, 60920.0], [77.1, 60920.0], [77.2, 60920.0], [77.3, 60922.0], [77.4, 60922.0], [77.5, 60923.0], [77.6, 60924.0], [77.7, 60924.0], [77.8, 60925.0], [77.9, 60926.0], [78.0, 60926.0], [78.1, 60927.0], [78.2, 60927.0], [78.3, 60928.0], [78.4, 60928.0], [78.5, 60930.0], [78.6, 60931.0], [78.7, 60931.0], [78.8, 60934.0], [78.9, 60935.0], [79.0, 60935.0], [79.1, 60936.0], [79.2, 60936.0], [79.3, 60936.0], [79.4, 60938.0], [79.5, 60938.0], [79.6, 60939.0], [79.7, 60939.0], [79.8, 60940.0], [79.9, 60942.0], [80.0, 60942.0], [80.1, 60943.0], [80.2, 60944.0], [80.3, 60944.0], [80.4, 60944.0], [80.5, 60945.0], [80.6, 60945.0], [80.7, 60946.0], [80.8, 60948.0], [80.9, 60948.0], [81.0, 60948.0], [81.1, 60949.0], [81.2, 60950.0], [81.3, 60950.0], [81.4, 60951.0], [81.5, 60951.0], [81.6, 60951.0], [81.7, 60952.0], [81.8, 60952.0], [81.9, 60953.0], [82.0, 60953.0], [82.1, 60953.0], [82.2, 60954.0], [82.3, 60954.0], [82.4, 60955.0], [82.5, 60955.0], [82.6, 60956.0], [82.7, 60956.0], [82.8, 60956.0], [82.9, 60957.0], [83.0, 60957.0], [83.1, 60958.0], [83.2, 60958.0], [83.3, 60959.0], [83.4, 60959.0], [83.5, 60960.0], [83.6, 60960.0], [83.7, 60961.0], [83.8, 60961.0], [83.9, 60961.0], [84.0, 60962.0], [84.1, 60963.0], [84.2, 60964.0], [84.3, 60964.0], [84.4, 60964.0], [84.5, 60965.0], [84.6, 60965.0], [84.7, 60966.0], [84.8, 60966.0], [84.9, 60966.0], [85.0, 60967.0], [85.1, 60967.0], [85.2, 60968.0], [85.3, 60969.0], [85.4, 60970.0], [85.5, 60970.0], [85.6, 60971.0], [85.7, 60971.0], [85.8, 60972.0], [85.9, 60972.0], [86.0, 60973.0], [86.1, 60974.0], [86.2, 60974.0], [86.3, 60974.0], [86.4, 60975.0], [86.5, 60975.0], [86.6, 60976.0], [86.7, 60977.0], [86.8, 60977.0], [86.9, 60978.0], [87.0, 60979.0], [87.1, 60980.0], [87.2, 60980.0], [87.3, 60982.0], [87.4, 60982.0], [87.5, 60983.0], [87.6, 60983.0], [87.7, 60983.0], [87.8, 60984.0], [87.9, 60984.0], [88.0, 60985.0], [88.1, 60985.0], [88.2, 60985.0], [88.3, 60986.0], [88.4, 60987.0], [88.5, 60987.0], [88.6, 60987.0], [88.7, 60989.0], [88.8, 60989.0], [88.9, 60990.0], [89.0, 60990.0], [89.1, 60990.0], [89.2, 60992.0], [89.3, 60992.0], [89.4, 60993.0], [89.5, 60994.0], [89.6, 60994.0], [89.7, 60996.0], [89.8, 60996.0], [89.9, 60996.0], [90.0, 60997.0], [90.1, 60997.0], [90.2, 60998.0], [90.3, 60999.0], [90.4, 60999.0], [90.5, 60999.0], [90.6, 61000.0], [90.7, 61001.0], [90.8, 61001.0], [90.9, 61002.0], [91.0, 61003.0], [91.1, 61003.0], [91.2, 61003.0], [91.3, 61005.0], [91.4, 61008.0], [91.5, 61008.0], [91.6, 61009.0], [91.7, 61010.0], [91.8, 61010.0], [91.9, 61011.0], [92.0, 61011.0], [92.1, 61012.0], [92.2, 61012.0], [92.3, 61013.0], [92.4, 61013.0], [92.5, 61013.0], [92.6, 61013.0], [92.7, 61014.0], [92.8, 61014.0], [92.9, 61015.0], [93.0, 61016.0], [93.1, 61017.0], [93.2, 61017.0], [93.3, 61018.0], [93.4, 61019.0], [93.5, 61020.0], [93.6, 61021.0], [93.7, 61022.0], [93.8, 61023.0], [93.9, 61023.0], [94.0, 61024.0], [94.1, 61025.0], [94.2, 61025.0], [94.3, 61026.0], [94.4, 61027.0], [94.5, 61029.0], [94.6, 61029.0], [94.7, 61031.0], [94.8, 61032.0], [94.9, 61033.0], [95.0, 61037.0], [95.1, 61038.0], [95.2, 61038.0], [95.3, 61039.0], [95.4, 61040.0], [95.5, 61041.0], [95.6, 61046.0], [95.7, 61048.0], [95.8, 61049.0], [95.9, 61051.0], [96.0, 61053.0], [96.1, 61054.0], [96.2, 61058.0], [96.3, 61062.0], [96.4, 61062.0], [96.5, 61066.0], [96.6, 61068.0], [96.7, 61073.0], [96.8, 61074.0], [96.9, 61075.0], [97.0, 61077.0], [97.1, 61086.0], [97.2, 61090.0], [97.3, 61101.0], [97.4, 61102.0], [97.5, 61110.0], [97.6, 61129.0], [97.7, 61132.0], [97.8, 61144.0], [97.9, 61297.0], [98.0, 61407.0], [98.1, 61457.0], [98.2, 61463.0], [98.3, 61471.0], [98.4, 61472.0], [98.5, 61479.0], [98.6, 61492.0], [98.7, 61774.0], [98.8, 62004.0], [98.9, 64001.0], [99.0, 64022.0], [99.1, 64050.0], [99.2, 68024.0], [99.3, 68039.0], [99.4, 68068.0], [99.5, 68075.0], [99.6, 68087.0], [99.7, 68219.0], [99.8, 68279.0], [99.9, 68285.0], [100.0, 68404.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 414.0, "series": [{"data": [[68300.0, 1.0], [46900.0, 1.0], [45300.0, 1.0], [46500.0, 1.0], [46100.0, 2.0], [47700.0, 2.0], [47300.0, 3.0], [49300.0, 1.0], [49700.0, 1.0], [51300.0, 2.0], [55700.0, 16.0], [58100.0, 1.0], [58900.0, 3.0], [58500.0, 6.0], [59700.0, 1.0], [60100.0, 4.0], [60900.0, 414.0], [60500.0, 2.0], [61300.0, 2.0], [61700.0, 3.0], [68200.0, 7.0], [500.0, 14.0], [600.0, 11.0], [700.0, 11.0], [800.0, 20.0], [900.0, 15.0], [1000.0, 18.0], [1100.0, 7.0], [1200.0, 10.0], [1300.0, 7.0], [1400.0, 9.0], [1500.0, 12.0], [1600.0, 12.0], [1700.0, 15.0], [1800.0, 12.0], [1900.0, 9.0], [2000.0, 23.0], [2100.0, 14.0], [2200.0, 16.0], [2300.0, 14.0], [2400.0, 30.0], [2500.0, 18.0], [2600.0, 16.0], [2800.0, 8.0], [2700.0, 16.0], [2900.0, 10.0], [3000.0, 14.0], [3100.0, 8.0], [3300.0, 14.0], [3200.0, 7.0], [3400.0, 14.0], [3500.0, 5.0], [3700.0, 4.0], [3600.0, 2.0], [3800.0, 7.0], [3900.0, 7.0], [4000.0, 12.0], [4100.0, 10.0], [4300.0, 15.0], [4200.0, 17.0], [68100.0, 1.0], [4600.0, 25.0], [4400.0, 15.0], [4500.0, 19.0], [4700.0, 19.0], [4800.0, 21.0], [5100.0, 14.0], [4900.0, 14.0], [5000.0, 18.0], [5300.0, 13.0], [5200.0, 14.0], [5600.0, 7.0], [5400.0, 14.0], [5500.0, 11.0], [5800.0, 12.0], [5700.0, 16.0], [5900.0, 19.0], [6100.0, 20.0], [6000.0, 4.0], [6200.0, 32.0], [6300.0, 22.0], [6500.0, 25.0], [6400.0, 25.0], [6600.0, 20.0], [6800.0, 32.0], [6900.0, 40.0], [6700.0, 35.0], [7100.0, 32.0], [7000.0, 42.0], [7400.0, 21.0], [7200.0, 29.0], [7300.0, 34.0], [7500.0, 33.0], [7600.0, 32.0], [7800.0, 31.0], [7700.0, 30.0], [7900.0, 35.0], [8000.0, 31.0], [8100.0, 20.0], [8300.0, 24.0], [8500.0, 21.0], [8700.0, 16.0], [8200.0, 21.0], [8600.0, 13.0], [8400.0, 18.0], [8900.0, 21.0], [9200.0, 7.0], [8800.0, 9.0], [9000.0, 7.0], [9100.0, 15.0], [9600.0, 10.0], [9500.0, 5.0], [9300.0, 5.0], [9700.0, 7.0], [9400.0, 11.0], [10200.0, 5.0], [9800.0, 3.0], [9900.0, 9.0], [10000.0, 3.0], [10100.0, 4.0], [10300.0, 8.0], [10700.0, 6.0], [10600.0, 2.0], [10500.0, 3.0], [10400.0, 5.0], [10900.0, 3.0], [10800.0, 7.0], [11000.0, 3.0], [11200.0, 3.0], [11100.0, 6.0], [11700.0, 6.0], [11300.0, 8.0], [11400.0, 3.0], [11600.0, 5.0], [12000.0, 2.0], [11800.0, 3.0], [12100.0, 2.0], [11900.0, 2.0], [12300.0, 1.0], [12400.0, 3.0], [12600.0, 4.0], [12700.0, 1.0], [12500.0, 2.0], [13200.0, 4.0], [13100.0, 4.0], [13300.0, 1.0], [13000.0, 3.0], [12800.0, 1.0], [13400.0, 4.0], [13700.0, 1.0], [13500.0, 4.0], [13800.0, 1.0], [13900.0, 3.0], [14200.0, 1.0], [14100.0, 4.0], [14000.0, 1.0], [14300.0, 1.0], [14500.0, 2.0], [14800.0, 1.0], [14400.0, 2.0], [14700.0, 1.0], [14900.0, 3.0], [15000.0, 1.0], [15100.0, 1.0], [15300.0, 1.0], [15600.0, 1.0], [15400.0, 1.0], [15500.0, 3.0], [15900.0, 3.0], [16100.0, 1.0], [16800.0, 1.0], [19800.0, 1.0], [22400.0, 1.0], [29200.0, 2.0], [29400.0, 1.0], [30000.0, 3.0], [29800.0, 1.0], [30600.0, 3.0], [30400.0, 1.0], [31400.0, 5.0], [31200.0, 3.0], [30800.0, 1.0], [31800.0, 2.0], [32400.0, 1.0], [37200.0, 1.0], [45200.0, 1.0], [46000.0, 2.0], [46800.0, 1.0], [47200.0, 1.0], [47600.0, 1.0], [49200.0, 1.0], [50000.0, 2.0], [50800.0, 1.0], [51200.0, 1.0], [52400.0, 1.0], [52000.0, 2.0], [56000.0, 1.0], [55600.0, 1.0], [58400.0, 6.0], [58000.0, 2.0], [59600.0, 3.0], [60000.0, 5.0], [60800.0, 21.0], [61200.0, 2.0], [62000.0, 3.0], [64000.0, 7.0], [68000.0, 13.0], [35500.0, 1.0], [36300.0, 2.0], [39500.0, 1.0], [45500.0, 2.0], [45100.0, 1.0], [46300.0, 3.0], [45900.0, 2.0], [47100.0, 1.0], [48300.0, 2.0], [47500.0, 1.0], [48700.0, 1.0], [47900.0, 1.0], [49500.0, 1.0], [51900.0, 1.0], [54300.0, 1.0], [55900.0, 1.0], [58300.0, 6.0], [58700.0, 2.0], [59900.0, 2.0], [61100.0, 15.0], [63900.0, 1.0], [19900.0, 1.0], [26900.0, 1.0], [27100.0, 1.0], [28900.0, 1.0], [29100.0, 1.0], [29300.0, 1.0], [30100.0, 2.0], [30700.0, 1.0], [29700.0, 1.0], [30300.0, 1.0], [30500.0, 2.0], [31500.0, 4.0], [31300.0, 2.0], [31700.0, 1.0], [30900.0, 3.0], [31100.0, 1.0], [33000.0, 1.0], [36200.0, 5.0], [37800.0, 1.0], [45000.0, 1.0], [45400.0, 2.0], [46200.0, 1.0], [45800.0, 2.0], [47400.0, 2.0], [49000.0, 1.0], [48600.0, 1.0], [51000.0, 1.0], [49400.0, 1.0], [51400.0, 1.0], [51800.0, 1.0], [53000.0, 1.0], [56600.0, 1.0], [55400.0, 3.0], [56200.0, 4.0], [55800.0, 1.0], [58600.0, 4.0], [58200.0, 1.0], [59000.0, 5.0], [59400.0, 1.0], [60200.0, 67.0], [61000.0, 182.0], [61400.0, 17.0], [68400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 68400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 122.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1810.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 122.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1810.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 764.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 53.54438642297652, "minX": 1.65813486E12, "maxY": 100.0, "series": [{"data": [[1.65813504E12, 100.0], [1.65813552E12, 100.0], [1.65813522E12, 100.0], [1.65813492E12, 100.0], [1.6581354E12, 100.0], [1.6581351E12, 100.0], [1.65813528E12, 100.0], [1.65813498E12, 100.0], [1.65813546E12, 100.0], [1.65813516E12, 100.0], [1.65813486E12, 53.54438642297652], [1.65813534E12, 100.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65813552E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 532.6666666666666, "minX": 5.0, "maxY": 33082.85684754523, "series": [{"data": [[5.0, 1895.6666666666667], [6.0, 777.75], [7.0, 977.8333333333334], [8.0, 532.6666666666666], [9.0, 740.1428571428571], [10.0, 788.875], [11.0, 728.3333333333333], [12.0, 1049.6666666666667], [13.0, 1042.75], [14.0, 866.8999999999999], [15.0, 1017.75], [16.0, 1031.2857142857142], [17.0, 1206.9999999999998], [18.0, 1175.0], [19.0, 1173.769230769231], [20.0, 1026.3333333333333], [21.0, 974.7142857142857], [22.0, 1604.2], [23.0, 1738.5714285714284], [24.0, 1959.1250000000002], [25.0, 1743.666666666667], [26.0, 1550.75], [27.0, 1746.2857142857142], [28.0, 2113.1428571428573], [29.0, 2194.0], [30.0, 2039.8000000000002], [31.0, 2067.8333333333335], [32.0, 2123.0], [33.0, 2187.2222222222217], [34.0, 2312.5], [35.0, 2341.8333333333335], [36.0, 1921.25], [37.0, 2351.1818181818185], [38.0, 2246.692307692308], [39.0, 2598.8333333333335], [40.0, 2674.25], [41.0, 2600.142857142857], [42.0, 2741.7333333333336], [43.0, 2713.0], [44.0, 3060.666666666667], [45.0, 2852.2], [46.0, 2895.1000000000004], [47.0, 2868.055555555555], [48.0, 2842.285714285714], [49.0, 2682.0], [50.0, 2534.75], [51.0, 2704.4166666666665], [52.0, 3223.625], [53.0, 3216.0], [54.0, 3397.8888888888887], [55.0, 3407.5555555555557], [56.0, 3265.75], [57.0, 3819.4], [58.0, 4017.0], [59.0, 4293.666666666666], [60.0, 4494.363636363637], [61.0, 4418.285714285714], [62.0, 4403.8], [63.0, 4938.799999999999], [64.0, 4667.857142857142], [65.0, 4686.5], [66.0, 4839.999999999999], [67.0, 4711.583333333333], [68.0, 4703.666666666668], [69.0, 4648.625], [70.0, 4944.0], [71.0, 4808.200000000001], [72.0, 5261.0], [73.0, 5268.25], [74.0, 4773.7], [75.0, 4662.21052631579], [76.0, 5140.625], [77.0, 4812.125], [78.0, 4551.8], [79.0, 4814.363636363635], [80.0, 4997.285714285714], [81.0, 4734.166666666667], [82.0, 4787.2], [83.0, 4876.875], [84.0, 5435.25], [85.0, 5373.0], [86.0, 5475.125], [87.0, 5144.333333333334], [88.0, 5579.454545454545], [89.0, 5363.333333333334], [90.0, 5550.0], [91.0, 5126.571428571428], [92.0, 5257.833333333333], [93.0, 5776.571428571428], [94.0, 6876.5], [95.0, 6383.714285714286], [96.0, 6428.6], [97.0, 6533.0], [98.0, 6370.625], [99.0, 6732.444444444445], [100.0, 33082.85684754523]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[86.80081602373888, 24719.15467359053]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 486.6666666666667, "minX": 1.65813486E12, "maxY": 23880.683333333334, "series": [{"data": [[1.65813504E12, 3973.4666666666667], [1.65813552E12, 486.6666666666667], [1.65813522E12, 486.6666666666667], [1.65813492E12, 23880.683333333334], [1.6581354E12, 486.6666666666667], [1.6581351E12, 1532.7333333333333], [1.65813528E12, 486.6666666666667], [1.65813498E12, 7060.4], [1.65813546E12, 486.6666666666667], [1.65813516E12, 486.6666666666667], [1.65813486E12, 23694.883333333335], [1.65813534E12, 486.6666666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.65813504E12, 1109.3333333333333], [1.65813552E12, 853.3333333333334], [1.65813522E12, 853.3333333333334], [1.65813492E12, 6587.733333333334], [1.6581354E12, 853.3333333333334], [1.6581351E12, 853.3333333333334], [1.65813528E12, 853.3333333333334], [1.65813498E12, 1945.6], [1.65813546E12, 853.3333333333334], [1.65813516E12, 853.3333333333334], [1.65813486E12, 6536.533333333334], [1.65813534E12, 853.3333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65813552E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3473.272845953002, "minX": 1.65813486E12, "maxY": 62855.47999999998, "series": [{"data": [[1.65813504E12, 44739.42307692309], [1.65813552E12, 60983.609999999986], [1.65813522E12, 61008.50000000001], [1.65813492E12, 7551.435233160621], [1.6581354E12, 60963.0], [1.6581351E12, 58627.590000000004], [1.65813528E12, 62855.47999999998], [1.65813498E12, 15806.219298245618], [1.65813546E12, 61004.170000000006], [1.65813516E12, 60799.63999999999], [1.65813486E12, 3473.272845953002], [1.65813534E12, 61084.640000000014]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65813552E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3473.224543080944, "minX": 1.65813486E12, "maxY": 62855.469999999994, "series": [{"data": [[1.65813504E12, 44739.40769230768], [1.65813552E12, 60983.579999999994], [1.65813522E12, 61008.490000000005], [1.65813492E12, 7551.353626943003], [1.6581354E12, 60963.0], [1.6581351E12, 58627.530000000006], [1.65813528E12, 62855.469999999994], [1.65813498E12, 15806.192982456136], [1.65813546E12, 61004.130000000005], [1.65813516E12, 60799.600000000006], [1.65813486E12, 3473.224543080944], [1.65813534E12, 61084.59000000002]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65813552E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 87.42819843342043, "minX": 1.65813486E12, "maxY": 806.39, "series": [{"data": [[1.65813504E12, 312.0692307692307], [1.65813552E12, 747.95], [1.65813522E12, 759.2199999999999], [1.65813492E12, 89.80051813471498], [1.6581354E12, 731.4000000000002], [1.6581351E12, 392.37999999999994], [1.65813528E12, 735.0099999999998], [1.65813498E12, 102.45614035087716], [1.65813546E12, 763.0999999999999], [1.65813516E12, 553.85], [1.65813486E12, 87.42819843342043], [1.65813534E12, 806.39]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65813552E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 504.0, "minX": 1.65813486E12, "maxY": 60225.0, "series": [{"data": [[1.65813504E12, 60225.0], [1.65813492E12, 11771.0], [1.6581351E12, 60148.0], [1.65813498E12, 48764.0], [1.65813486E12, 7855.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.65813504E12, 58932.2], [1.65813492E12, 8795.800000000001], [1.6581351E12, 60100.6], [1.65813498E12, 45462.8], [1.65813486E12, 5774.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.65813504E12, 60178.31], [1.65813492E12, 10102.919999999995], [1.6581351E12, 60148.0], [1.65813498E12, 48179.4], [1.65813486E12, 7139.740000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.65813504E12, 59742.75], [1.65813492E12, 9177.6], [1.6581351E12, 60122.2], [1.65813498E12, 46450.649999999994], [1.65813486E12, 6321.899999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.65813504E12, 26948.0], [1.65813492E12, 4125.0], [1.6581351E12, 55409.0], [1.65813498E12, 6735.0], [1.65813486E12, 504.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.65813504E12, 47372.5], [1.65813492E12, 7505.0], [1.6581351E12, 55822.5], [1.65813498E12, 11626.0], [1.65813486E12, 3357.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.6581351E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2209.0, "minX": 1.0, "maxY": 68236.0, "series": [{"data": [[2.0, 31720.0], [35.0, 55746.0], [38.0, 7269.5], [40.0, 30986.5], [3.0, 11029.0], [4.0, 47520.0], [5.0, 10848.0], [6.0, 7336.5], [7.0, 8977.0], [8.0, 9156.0], [9.0, 6841.0], [10.0, 6606.5], [11.0, 5208.0], [12.0, 6972.5], [13.0, 6779.0], [14.0, 4878.0], [15.0, 5751.5], [16.0, 2715.0], [1.0, 33959.5], [17.0, 6463.0], [18.0, 7349.5], [19.0, 8112.5], [20.0, 4884.5], [21.0, 8812.5], [22.0, 2839.0], [23.0, 2209.0], [24.0, 58457.0], [25.0, 7946.0], [26.0, 4564.5], [27.0, 6583.0], [28.0, 6911.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 60932.5], [2.0, 60980.0], [9.0, 68236.0], [11.0, 60967.0], [3.0, 60985.0], [14.0, 60956.5], [15.0, 60960.0], [1.0, 61011.5], [16.0, 60954.5], [4.0, 60976.5], [18.0, 61037.5], [19.0, 61025.5], [5.0, 60953.0], [20.0, 60972.5], [21.0, 60982.0], [22.0, 60239.5], [24.0, 60242.0], [6.0, 60989.0], [7.0, 61007.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2209.0, "minX": 1.0, "maxY": 68236.0, "series": [{"data": [[2.0, 31720.0], [35.0, 55746.0], [38.0, 7269.5], [40.0, 30986.5], [3.0, 11029.0], [4.0, 47520.0], [5.0, 10848.0], [6.0, 7336.5], [7.0, 8977.0], [8.0, 9156.0], [9.0, 6841.0], [10.0, 6606.5], [11.0, 5208.0], [12.0, 6972.5], [13.0, 6779.0], [14.0, 4878.0], [15.0, 5751.5], [16.0, 2715.0], [1.0, 33959.5], [17.0, 6463.0], [18.0, 7349.5], [19.0, 8112.5], [20.0, 4884.5], [21.0, 8812.5], [22.0, 2839.0], [23.0, 2209.0], [24.0, 58456.5], [25.0, 7946.0], [26.0, 4564.5], [27.0, 6583.0], [28.0, 6911.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 60932.5], [2.0, 60980.0], [9.0, 68236.0], [11.0, 60966.5], [3.0, 60985.0], [14.0, 60956.5], [15.0, 60960.0], [1.0, 61011.5], [16.0, 60954.5], [4.0, 60976.5], [18.0, 61037.5], [19.0, 61025.5], [5.0, 60953.0], [20.0, 60972.5], [21.0, 60982.0], [22.0, 60239.5], [24.0, 60242.0], [6.0, 60989.0], [7.0, 61007.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.65813486E12, "maxY": 14.433333333333334, "series": [{"data": [[1.65813504E12, 2.1666666666666665], [1.65813522E12, 1.6666666666666667], [1.65813492E12, 12.866666666666667], [1.6581354E12, 1.6666666666666667], [1.6581351E12, 1.6666666666666667], [1.65813528E12, 1.6666666666666667], [1.65813498E12, 3.8], [1.65813546E12, 1.6666666666666667], [1.65813516E12, 1.6666666666666667], [1.65813486E12, 14.433333333333334], [1.65813534E12, 1.6666666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65813546E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65813486E12, "maxY": 12.85, "series": [{"data": [[1.65813504E12, 2.1333333333333333], [1.65813492E12, 12.85], [1.6581351E12, 0.6666666666666666], [1.65813498E12, 3.8], [1.65813486E12, 12.75]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.65813492E12, 0.016666666666666666], [1.6581351E12, 0.06666666666666667], [1.65813486E12, 0.016666666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.65813504E12, 0.03333333333333333], [1.65813552E12, 1.6666666666666667], [1.65813522E12, 1.6666666666666667], [1.6581354E12, 1.6666666666666667], [1.6581351E12, 0.9333333333333333], [1.65813528E12, 1.6666666666666667], [1.65813546E12, 1.6666666666666667], [1.65813516E12, 1.6666666666666667], [1.65813534E12, 1.6666666666666667]], "isOverall": false, "label": "504", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.65813552E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65813486E12, "maxY": 12.85, "series": [{"data": [[1.65813504E12, 0.03333333333333333], [1.65813552E12, 1.6666666666666667], [1.65813522E12, 1.6666666666666667], [1.65813492E12, 0.016666666666666666], [1.6581354E12, 1.6666666666666667], [1.6581351E12, 1.0], [1.65813528E12, 1.6666666666666667], [1.65813546E12, 1.6666666666666667], [1.65813516E12, 1.6666666666666667], [1.65813486E12, 0.016666666666666666], [1.65813534E12, 1.6666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.65813504E12, 2.1333333333333333], [1.65813492E12, 12.85], [1.6581351E12, 0.6666666666666666], [1.65813498E12, 3.8], [1.65813486E12, 12.75]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65813552E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.65813486E12, "maxY": 12.85, "series": [{"data": [[1.65813504E12, 2.1333333333333333], [1.65813492E12, 12.85], [1.6581351E12, 0.6666666666666666], [1.65813498E12, 3.8], [1.65813486E12, 12.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.65813504E12, 0.03333333333333333], [1.65813552E12, 1.6666666666666667], [1.65813522E12, 1.6666666666666667], [1.65813492E12, 0.016666666666666666], [1.6581354E12, 1.6666666666666667], [1.6581351E12, 1.0], [1.65813528E12, 1.6666666666666667], [1.65813546E12, 1.6666666666666667], [1.65813516E12, 1.6666666666666667], [1.65813486E12, 0.016666666666666666], [1.65813534E12, 1.6666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.65813552E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

